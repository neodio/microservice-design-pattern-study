server:
  port: 8081

spring:
  application:
    name: user-service
  h2:
    console:
      enabled: true
      settings:
        web-allow-others: true
      path: /h2-console
  jpa:
    hibernate:
      ddl-auto: update
  datasource:
    driver-class-name: org.h2.Driver
    url: jdbc:h2:mem:testdb
    username: sa
    password:

eureka:
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka

greeting:
  message: Welcome to the Simple E-commerce.

logging:
  level:
    com.example.userservice.client: DEBUG
  pattern:
    correlation: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'

management:
  endpoints:
    web:
      exposure:
        include: "*"
  tracing:
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: "http://localhost:9411/api/v2/spans"
gateway:
  ip: 127.0.0.1

token:
  expiration_time: 86400000
  secret: user_token_test_for_jwt_token_20250328

resilience4j:
  bulkhead:
    instances:
      orderService:
        maxConcurrentCalls: 5       # 동시에 5개 호출까지 허용 (세마포어 방식)
  thread-pool-bulkhead:
    instances:
      orderService:
        coreThreadPoolSize: 2       # 스레드풀 최소 2개, 최대 2개
        maxThreadPoolSize: 2
        queueCapacity: 10           # 대기 큐에 10개까지 요청 저장
  timelimiter:
    instances:
      orderService:
        timeoutDuration: 2s    # 2초 초과 시 타임아웃
        cancelRunningFuture: true
  circuitbreaker:
    instances:
      orderService:
        slidingWindowSize: 5            # 최근 5번의 호출 기록으로 계산
        failureRateThreshold: 50        # 실패율 50% 초과 시 회로 열기
        waitDurationInOpenState: 10s    # Open 상태 유지 시간 (10초)
  retry:
    instances:
      orderService:
        maxAttempts: 3       # 최대 3번 시도
        waitDuration: 1s     # 재시도 간 1초 대기
